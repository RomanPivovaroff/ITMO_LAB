@startuml
' Определение возможных статусов для персонажей
enum State {
    WAITING
    SEARCHING
    ATTACK
    FOUND
    PROTECTED
    DIED
}

' Интерфейс для действий
interface Action {
    + performAction(): void
}

' Абстрактный класс для персонажей
abstract class Character {
    - name: String
    - state: State
    - location: Location
    + Character(name: String, location: Location)
    + getinfo (): CharacterInfo
    + toString(): String
}

' Классы для конкретных персонажей
class GiantDaughter {
    - locations: Locations[]
    + GiantDaughter(name: String, location: Location)
    + performAction(): void
}

class Giant {
    + Giant(name: String, location: Location)
    + performAction(): void
}

class Prince {
    - locations: Locations[]
    + Prince(name: String, location: Location)
    + performAction(): void
}

class Wolf {
    + Wolf(name: String, location: Location)
    + performAction(): void
}

' Класс для локаций
class Location {
    - description: String
    + Location(description: String)
    + getDescription(): String
}

' Исключение для ситуации, когда персонаж потерян
class CharacterNotFoundException {
    + CharacterNotFoundException(message: String)
    + getMessage(): String
}

'record для информации о персонажах
entity CharacterInfo <<record>> {
    + name: String
    + location: String
    + state: State
}

' Массив волков
metaclass Wolfs {
    Wolf[]
}

class Main {}
' Связи между классами
Character <|-- GiantDaughter: extends
Character <|-- Giant: extends
Character <|-- Prince: extends
Character <|-- Wolf: extends

' Добавление интерфейса Action
Action <|.. Character: implements

Character "1" -- "1" Location : has
CharacterNotFoundException ..> Character : throws
Wolfs --> "1..*" Wolf : "contains"

' Связь record с классом Character
Character --> CharacterInfo : "provides info"
@enduml