@startuml
' Определение возможных статусов для персонажей
enum State {
    WAITING
    SEARCHING
    LOST
    FOUND
    PROTECTED
    DIED
    AFRAID
}

' Интерфейс для действий поиска
interface SearchAction {
    + Search(Location target_location): void
}

' Абстрактный класс для персонажей
abstract class Character {
    - name: String
    - state: State
    - location: Location
    + Character(name: String, location: Location)
    + getinfo (): CharacterInfo
    + toString(): String
}

' Абстрактный класс для персонажейАбстрактный класс для всех обектов, взаимодействущих с персоонажами, но не явл. ими
abstract class Creature{
    - location: Location
    + Creature(location: Location)
    + interact(Character character): void
}

' Классы для конкретных персонажей
class GiantDaughter {
    + GiantDaughter(name: String, location: Location)
    + performAction(): void
}

class Giant {
    - GiantLocations: ArrayList<Location>
    + Giant(name: String, location: Location)
    + performAction(): void
    + Search(Location target_location): void
}

class Prince {
    - Princelocations: ArrayList<Location>
    - strenght: int
    + Prince(name: String, location: Location)
    + performAction(): void
    + Search(Location target_location): Void
}
' Классы-наследники Creature 
class Wolf {
    + Wolf(name: String, location: Location)
    + interact(Character character): void
    + Search(Location target_location): void
}

class Tree {
    + Wolf(name: String, location: Location)
    + interact(Character character): void
}

' Класс для локаций
class Location {
    - description: String
    + Location(description: String)
    + getDescription(): String
    + equals(Object obj): boolean
    + hashCode(): int
    + toString(): String
}

' Исключение для ситуации, когда персонаж потерян
class CharacterNotFoundException {
    + CharacterNotFoundException(message: String)
    + getMessage(): String
}

'record для информации о персонажах
entity CharacterInfo <<record>> {
    + name: String
    + location: String
    + state: State
}

' Массив волков
metaclass Wolfs {
    Wolf[]
}

class Main {}
' Связи между классами
Character <|-- GiantDaughter: extends
Character <|-- Giant: extends
Character <|-- Prince: extends
Creature <|-- Wolf: extends
Creature <|-- Tree: extends

' Добавление связи классов и интерфейса SearchAction
Prince <|.. SearchAction : implements
Giant <|.. SearchAction : implements
Wolf <|.. SearchAction : implements


Character "1" -- "1" Location : has
CharacterNotFoundException ..> Character : throws
Wolfs --> "1..*" Wolf : "contains"

' Связь record с классом Character
Character --> CharacterInfo : "provides info"
@enduml